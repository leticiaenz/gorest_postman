{
	"info": {
		"_postman_id": "64108028-830d-4651-87b3-7bf497e02df3",
		"name": "Go Rest - Trabalho",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20514449"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "[CT-001] - Buscar todos os usuários",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"    });",
											"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
											"    pm.collectionVariables.set(\"vname\", jsonData[0].name);",
											"    pm.collectionVariables.set(\"vemail\", jsonData[0].email);",
											"    pm.collectionVariables.set(\"vgender\", jsonData[0].gender);",
											"    pm.collectionVariables.set(\"vstatus\", jsonData[0].status);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-002] - Buscar um usuário específico - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"   pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{vid}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{vid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-003] - Filtrar pelo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-004] - Filtrar pelo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-005] - Filtrar pelo sexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.sexo).to.eq(pm.collectionVariables.get(\"vsexo\"));",
											"    });",
											"});;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?sexo={{vgender}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "sexo",
											"value": "{{vgender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-006] - Filtrar pela situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"        ",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-007] - Filtrar pelo nome, e-mail, sexo e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&email={{vemail}}&gender={{vgender}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "gender",
											"value": "{{vgender}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-008] - Filtrar pelo nome e e-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&email={{vemail}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "email",
											"value": "{{vemail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-009] - Filtrar pelo nome e sexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&gender={{vgender}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "gender",
											"value": "{{vgender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-010] - Filtrar pelo nome e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name={{vname}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "{{vname}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-011] - Filtrar pelo email e sexo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email={{vemail}}&gender={{vgender}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "gender",
											"value": "{{vgender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-012] - Filtrar pelo email e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email={{vemail}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{vemail}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-013] - Filtrar pelo sexo e situação",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    _.each(jsonData, (item) => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"name\");",
											"        pm.expect(item).to.have.property(\"email\");",
											"        pm.expect(item).to.have.property(\"gender\");",
											"        pm.expect(item).to.have.property(\"status\");",
											"",
											"        pm.expect(item.gender).to.eq(pm.collectionVariables.get(\"vgender\"));",
											"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?gender={{vgender}}&status={{vstatus}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "gender",
											"value": "{{vgender}}"
										},
										{
											"key": "status",
											"value": "{{vstatus}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-014] - Buscar um usuário que não existe pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/99999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"99999999"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-015] - Buscar um usuário por um id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?id=asdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "id",
											"value": "asdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-016] - Buscar usuário por um nome inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?name=adfafedeadafaef",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "adfafedeadafaef"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-017] - Buscar usuário por um email inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"",
											"    var res = (_.isEmpty(jsonData));",
											"    pm.expect(res).to.be.true;",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users?email=dses",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "dses"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-018] - Buscar usuário por um sexo invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/gender=sexo",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"gender=sexo"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT-019] - Buscar usuário por uma situação inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response is empty\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
											"",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/status=status",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"status=status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Users",
					"item": [
						{
							"name": "[CT001] - Cadastrar um usuário com sucesso - todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.name).to.eq(\"Leticia4\");",
											"    pm.expect(jsonData.email).to.eq(\"leticia4@educa.com\");",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia4\",\n    \"email\": \"leticia4@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002] - Cadastrar um usuário com sucesso - somente campos obrigatórios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.name).to.eq(\"Leticia5\");",
											"    pm.expect(jsonData.email).to.eq(\"leticia5@educa.com\");",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia5\",\n    \"email\": \"leticia5@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003] - Cadastrar um usuário - gender female",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.gender).to.eq(\"female\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia5\",\n    \"email\": \"leticia5@educa.com\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004] - Cadastrar um usuário - gender male",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.gender).to.eq(\"male\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Fabio\",\n    \"email\": \"fabio@educa.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005] - Cadastrar um usuário - status active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.status).to.eq(\"active\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Fabio\",\n    \"email\": \"fabio@educa.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006] - Cadastrar um usuário - status inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.collectionVariables.set(\"userIdPost\", jsonData.id);",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"email\");",
											"    pm.expect(jsonData).to.have.property(\"gender\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"",
											"    pm.expect(jsonData.status).to.eq(\"inactive\");",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Fabio\",\n    \"email\": \"fabio@educa.com\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008] - Cadastrar um usuário em duplicidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"pm.test(\"Body response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"field\");",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData[0].field).to.eq(\"email\");",
											"    pm.expect(jsonData[0].message).to.eq(\"has already been taken\");",
											" ",
											"  ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"name\": \"Leticia4\",\n    \"email\": \"leticia4@educa.com\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/public/v2/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca o usuário cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPost}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleta o usuário cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/public/v2/users/{{userIdPost}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{userIdPost}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": []
				}
			]
		},
		{
			"name": "Get Posts",
			"item": [
				{
					"name": "[CT-001] - Buscar todos os posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"    });",
									"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
									"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
									"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
									"    pm.collectionVariables.set(\"vbody\", jsonData[0].body); ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-002] - Buscar um post específico - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"   ",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"body\");",
									"",
									"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-003] - Filtrar pelo user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-004] - Filtrar pelo title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-005] - Filtrar pelo body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-006] - Filtrar pela user_id, title e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}&title={{vtitle}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-007] - Filtrar pelo user_id e title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}&title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-008] - Filtrar pelo user_id e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?user_id={{vuser_id}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-009] - Filtrar pelo title e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts?title={{vtitle}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-010] - Buscar um post que não existe pelo id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/9999999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-011] - Buscar um post por um id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"sdsdsdsdsd"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-012] - Buscar um post por um user_id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd?user_id=99999999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"sdsdsdsdsd"
							],
							"query": [
								{
									"key": "user_id",
									"value": "99999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-013] - Buscar post por um title inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd?title=enzle",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"sdsdsdsdsd"
							],
							"query": [
								{
									"key": "title",
									"value": "enzle"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-014] - Buscar post por um body inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/sdsdsdsdsd?body=adedleoec",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"sdsdsdsdsd"
							],
							"query": [
								{
									"key": "body",
									"value": "adedleoec"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Comments",
			"item": [
				{
					"name": "[CT-001] - Buscar todos os comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"    });",
									"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
									"    pm.collectionVariables.set(\"vpost_id\", jsonData[0].post_id);",
									"    pm.collectionVariables.set(\"vname\", jsonData[0].name);",
									"    pm.collectionVariables.set(\"vemail\", jsonData[0].email);",
									"    pm.collectionVariables.set(\"vbody\", jsonData[0].body);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-002] - Buscar um comments específico - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"   ",
									"        pm.expect(jsonData).to.have.property(\"id\");",
									"        pm.expect(jsonData).to.have.property(\"post_id\");",
									"        pm.expect(jsonData).to.have.property(\"name\");",
									"        pm.expect(jsonData).to.have.property(\"email\");",
									"        pm.expect(jsonData).to.have.property(\"body\");",
									"",
									"        pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/{{vid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"{{vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-003] - Filtrar pelo post_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{vpost_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-004] - Filtrar pelo name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?name={{vname}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{vname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-005] - Filtrar pelo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?email={{vemail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "email",
									"value": "{{vemail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-006] - Filtrar pela body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-007] - Filtrar pelo post_id, name, email e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&name={{vname}}&email={{vemail}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{vpost_id}}"
								},
								{
									"key": "name",
									"value": "{{vname}}"
								},
								{
									"key": "email",
									"value": "{{vemail}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-008] - Filtrar pelo post_id e name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&name={{vname}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{vpost_id}}"
								},
								{
									"key": "name",
									"value": "{{vname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-009] - Filtrar pelo post_id, email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&email={{vemail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{vpost_id}}"
								},
								{
									"key": "email",
									"value": "{{vemail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-010] - Filtrar pelo post_id e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.post_id).to.eq(pm.collectionVariables.get(\"vpost_id\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?post_id={{vpost_id}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{vpost_id}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-011] - Filtrar pelo name e email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?name={{vname}}&email={{vemail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{vname}}"
								},
								{
									"key": "email",
									"value": "{{vemail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-012] - Filtrar pelo name e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"        ",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?name={{vname}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{vname}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-013] - Filtrar pelo email e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments?email={{vemail}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments"
							],
							"query": [
								{
									"key": "email",
									"value": "{{vemail}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-014] - Buscar um comments que não existe pelo id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/99999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-015] - Buscar um comments por um id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"asdfg"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-016] - Buscar comments por um post_id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/asdfg?post_id=99999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"asdfg"
							],
							"query": [
								{
									"key": "post_id",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-017] - Buscar comments por um email inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/asdfg?email=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"asdfg"
							],
							"query": [
								{
									"key": "email",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-018] - Buscar comments por um email inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/asdfg?name=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"asdfg"
							],
							"query": [
								{
									"key": "name",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-019] - Buscar comments por um email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/asdfg?email=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"asdfg"
							],
							"query": [
								{
									"key": "email",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-020] - Buscar comments por um body inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/comments/asdfg?body=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"asdfg"
							],
							"query": [
								{
									"key": "body",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Todos",
			"item": [
				{
					"name": "[CT-001] - Buscar todos os todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"    });",
									"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
									"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
									"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
									"    pm.collectionVariables.set(\"vdue_on\", jsonData[0].due_on);",
									"    pm.collectionVariables.set(\"vstatus\", jsonData[0].status);",
									"       ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-002] - Buscar um todo específico - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"due_on\");",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"",
									"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"       ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/{{vid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"{{vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-003] - Filtrar pelo user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-004] - Filtrar pelo title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-005] - Filtrar pelo due_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?due_on={{vdue_on}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-006] - Filtrar pela status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-007] - Filtrar pelo user_id, title, due_on e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&title={{vtitle}}&due_on={{vdue_on}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-008] - Filtar pelo user_id e title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-009] - Filtar pelo user_id e due_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"       ",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&due_on={{vdue_on}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-010] - Filtar pelo user_id e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.user_id).to.eq(pm.collectionVariables.get(\"vuser_id\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?user_id={{vuser_id}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{vuser_id}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-011] - Filtrar pelo title e due_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"        ",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?title={{vtitle}}&due_on={{vdue_on}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-012] - Filtrar pelo title e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?title={{vtitle}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-013] - Filtrar pelo due_on e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?due_on={{vdue_on}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-014] - Buscar um usuário que não existe pelo id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/99999999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"99999999"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-015] - Buscar um usuário por um id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/sdsedewd",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"sdsedewd"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-016] - Buscar por um use_id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/sdsedewd?user_id=999999999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"sdsedewd"
							],
							"query": [
								{
									"key": "user_id",
									"value": "999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-016] - Buscar por um use_id inexistente Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/sdsedewd",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"sdsedewd"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-017] - Buscar usuário por um title inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/sdsedewd?title=fdfdgrrere",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"sdsedewd"
							],
							"query": [
								{
									"key": "title",
									"value": "fdfdgrrere"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-018] - Buscar usuário por um due_on inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.text()).to.include(\"Resource not found\");",
									"",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message).to.eq(\"Resource not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos/sdsedewd?due_on=fdfdfdfgd",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"sdsedewd"
							],
							"query": [
								{
									"key": "due_on",
									"value": "fdfdfdfgd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-019] - Buscar usuário por um status inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/todos?status=sdfsdfsfs",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"todos"
							],
							"query": [
								{
									"key": "status",
									"value": "sdfsdfsfs"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get User/Post",
			"item": [
				{
					"name": "[CT-001] - Buscar todos os posts de um usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"    });",
									"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
									"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
									"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
									"    pm.collectionVariables.set(\"vbody\", jsonData[0].body);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-002] - Buscar todos os posts de um id de usuario especifico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"body\");",
									"    ",
									"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-003] - Filtrar pelo title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-004] - Filtrar pelo body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-005] - Filtrar pelo id, title e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}&title={{vtitle}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-006] - Filtrar pelo id e title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}&title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-007] - Filtrar pelo id e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id={{vid}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-008] - Filtrar pelo title e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?title={{vtitle}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-009] - Buscar um post que não existe pelo user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/999999999/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"999999999",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-010] - Buscar um post por um user_id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/asdfg/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"asdfg",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-011] - Buscar um post por um id que não existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id=999999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-012] - Buscar um post por um id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-013] - Buscar post por um title inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?id=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "id",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-014] - Buscar post por um body inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/posts?body=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"posts"
							],
							"query": [
								{
									"key": "body",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Posts/Comments",
			"item": [
				{
					"name": "[CT-001] - Buscar todos os comments de um post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"    });",
									"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
									"    pm.collectionVariables.set(\"vpost_id\", jsonData[0].post_id);",
									"    pm.collectionVariables.set(\"vname\", jsonData[0].name);",
									"    pm.collectionVariables.set(\"vemail\", jsonData[0].email);",
									"    pm.collectionVariables.set(\"vbody\", jsonData[0].body);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-002] - Buscar todos os comments de um id de post especifico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData).to.have.property(\"id\");",
									"        pm.expect(jsonData).to.have.property(\"post_id\");",
									"        pm.expect(jsonData).to.have.property(\"name\");",
									"        pm.expect(jsonData).to.have.property(\"email\");",
									"        pm.expect(jsonData).to.have.property(\"body\");",
									"        ",
									"        pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-003] -  Filtrar pelo name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name={{vname}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{vname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-004] - Filtrar pelo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?email={{vemail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "email",
									"value": "{{vemail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-005] - Filtrar pelo body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-006] - Filtrar pelo id, name, email e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&name={{vname}}&email={{vemail}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "name",
									"value": "{{vname}}"
								},
								{
									"key": "email",
									"value": "{{vemail}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-007] - Filtrar pelo id e name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&name={{vname}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "name",
									"value": "{{vname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-008] - Filtrar pelo id e email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&email={{vemail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "email",
									"value": "{{vemail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-009] - Filtrar pelo id e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id={{vid}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-010] - Filtrar pelo name e email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name={{vname}}&email={{vemail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{vname}}"
								},
								{
									"key": "email",
									"value": "{{vemail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-011] - Filtrar pelo name e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.name).to.eq(pm.collectionVariables.get(\"vname\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name={{vname}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "{{vname}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-012] - Filtrar pelo email e body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"post_id\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"email\");",
									"        pm.expect(item).to.have.property(\"body\");",
									"",
									"        pm.expect(item.email).to.eq(pm.collectionVariables.get(\"vemail\"));",
									"        pm.expect(item.body).to.eq(pm.collectionVariables.get(\"vbody\"));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?email={{vemail}}&body={{vbody}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "email",
									"value": "{{vemail}}"
								},
								{
									"key": "body",
									"value": "{{vbody}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-013] - Buscar um comment que não existe pelo post_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/99999/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"99999",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-014] - Buscar um comments por um post_id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/asdfg/comments",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"asdfg",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-015] - Buscar um comments por um id que não existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?id=99999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-016] - Buscar um comments por um id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-017] - Buscar comments por um name inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?name=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "name",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-018] - Buscar comments por um email inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?email=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "email",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-019] - Buscar comments por um body inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/posts/{{vpost_id}}/comments?body=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"{{vpost_id}}",
								"comments"
							],
							"query": [
								{
									"key": "body",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get User/Todos",
			"item": [
				{
					"name": "[CT-001] - Buscar todos os todos de um usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"    });",
									"    pm.collectionVariables.set(\"vid\", jsonData[0].id);",
									"    pm.collectionVariables.set(\"vuser_id\", jsonData[0].user_id);",
									"    pm.collectionVariables.set(\"vtitle\", jsonData[0].title);",
									"    pm.collectionVariables.set(\"vdue_on\", jsonData[0].due_on);",
									"    pm.collectionVariables.set(\"vstatus\", jsonData[0].status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-002] - Buscar todos os todos de um id de user especifico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"   ",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"user_id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"due_on\");",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"",
									"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-003] - Filtrar pelo title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-004] - Filtrar pelo due_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?due_on={{vdue_on}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-005] - Filtrar pelo status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-006] - Filtrar pelo id, title, due_on e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&title={{vtitle}}&due_on={{vdue_on}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-007] - Filtrar pelo id e title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&title={{vtitle}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "title",
									"value": "{{vtitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-008] - Filtrar pelo id e due_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&due_on={{vdue_on}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-009] - Filtrar pelo id e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.id).to.eq(pm.collectionVariables.get(\"vid\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id={{vid}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vid}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-010] - Filtrar pelo title e due_on",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title={{vtitle}}&due_on={{vdue_on}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-011] - Filtrar pelo title e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"",
									"        pm.expect(item.title).to.eq(pm.collectionVariables.get(\"vtitle\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title={{vtitle}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "{{vtitle}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-012] - Filtrar pelo due_on e status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"user_id\");",
									"        pm.expect(item).to.have.property(\"title\");",
									"        pm.expect(item).to.have.property(\"due_on\");",
									"        pm.expect(item).to.have.property(\"status\");",
									"        ",
									"        pm.expect(item.due_on).to.eq(pm.collectionVariables.get(\"vdue_on\"));",
									"        pm.expect(item.status).to.eq(pm.collectionVariables.get(\"vstatus\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?due_on={{vdue_on}}&status={{vstatus}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "due_on",
									"value": "{{vdue_on}}"
								},
								{
									"key": "status",
									"value": "{{vstatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-013] - Buscar um todos que não existe pelo use_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/99999/todos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"99999",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-014] - Buscar um todos por um user_id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/asdfg/todos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"asdfg",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-015] - Buscar um todos por um id que não existe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?id=99999",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "id",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-016] - Buscar um todos por um id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response is empty\", () => {",
									"    var jsonData = pm.response.json();",
									"",
									"    var res = (_.isEmpty(jsonData));",
									"    pm.expect(res).to.be.true;",
									"});",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?d=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "d",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-017] - Buscar todos por um title inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?title=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "title",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-018] - Buscar todos por um due_on inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?due_on=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "due_on",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT-019] - Buscar todos por um status inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"",
									"pm.test(\"Body response\", function () {",
									"    var jsonData = pm.response.json();",
									"    _.each(jsonData, (item) => {})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/public/v2/users/{{vuser_id}}/todos?status=asdfg",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{vuser_id}}",
								"todos"
							],
							"query": [
								{
									"key": "status",
									"value": "asdfg"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "2a1ec3de45d6886390428ac955d22dbb9f7efe66982878c6792a002de557d13d",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://gorest.co.in",
			"type": "string"
		},
		{
			"key": "vid",
			"value": ""
		},
		{
			"key": "vname",
			"value": ""
		},
		{
			"key": "vemail",
			"value": ""
		},
		{
			"key": "vgender",
			"value": ""
		},
		{
			"key": "vstatus",
			"value": ""
		},
		{
			"key": "vuser_id",
			"value": ""
		},
		{
			"key": "vtitle",
			"value": ""
		},
		{
			"key": "vdue_on",
			"value": ""
		},
		{
			"key": "vbody",
			"value": ""
		},
		{
			"key": "vpost_id",
			"value": ""
		},
		{
			"key": "userIdPost",
			"value": ""
		}
	]
}